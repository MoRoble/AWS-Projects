
Description:  Wordpress Architecture Evolution - VPC
              Basic CFN templete for Web-App, this template expanded to SN A/B and C 
              There's CloudWatch Configuration from SSM Paramater Store
              later it will expand.
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.16.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: HDNVPC
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: HDN-IGW
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RTPub: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: HDN-vpc-rt-pub
  RTPubDefaultIPv4: 
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: RTPub
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: InternetGateway
  RTAssociationPubA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SNPUBA
      RouteTableId:
        Ref: RTPub
  SNDBA:
    Type: AWS::EC2::Subnet
    # DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.16.16.0/20
      Tags:
        - Key: Name
          Value: sn-db-A
  SNDBB:
    Type: AWS::EC2::Subnet
    # DependsOn: IPv6CidrBlock
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.16.80.0/20
      
      Tags:
        - Key: Name
          Value: sn-db-B        
  SNDBC:
    Type: AWS::EC2::Subnet
    
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.16.144.0/20
      
      Tags:
        - Key: Name
          Value: sn-db-C
  SNAPPA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.16.32.0/20
      Tags:
        - Key: Name
          Value: sn-app-A
  SNAPPB:
    Type: AWS::EC2::Subnet
    
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.16.96.0/20
      
      Tags:
        - Key: Name
          Value: sn-app-B
  SNAPPC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.16.160.0/20
      
      Tags:
        - Key: Name
          Value: sn-app-C        
  SNPUBA:
    Type: AWS::EC2::Subnet
  
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.16.48.0/20
      MapPublicIpOnLaunch: true    
      Tags:
        - Key: Name
          Value: sn-pub-A
  SNPUBB:
    Type: AWS::EC2::Subnet
    
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.16.112.0/20
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: sn-pub-B
  SNPUBC:
    Type: AWS::EC2::Subnet
    
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.16.176.0/20
      MapPublicIpOnLaunch: true

      Tags:
        - Key: Name
          Value: sn-pub-C
  SGWordpress:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Control access to Wordpress Instance(s)
      SecurityGroupIngress: 
        - Description: 'Allow HTTP IPv4 IN'
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
        - Description: 'Allow SSH IPv4 IN'
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
  SGDatabase:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Control access to Database
      SecurityGroupIngress: 
        - Description: 'Allow MySQL IN'
          IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref SGWordpress
  SGLoadBalancer:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Control access to Load Balancer
      SecurityGroupIngress: 
        - Description: 'Allow HTTP IPv4 IN'
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
  SGEFS:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Control access to EFS
      SecurityGroupIngress: 
        - Description: 'Allow NFS/EFS IPv4 IN'
          IpProtocol: tcp
          FromPort: '2049'
          ToPort: '2049'
          SourceSecurityGroupId: !Ref SGWordpress
  WordpressRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonElasticFileSystemClientFullAccess
        # - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - "arn:aws:iam::aws:policy/AmazonSSMFullAccess"
  WordpressInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref WordpressRole

  # CWAgentConfig:
  #   Type: AWS::SSM::Parameter
  #   Properties:
  #     Type: 'String'
  #     Value: |
  #       {
  #         "agent": {
  #           "metrics_collection_interval": 60,
  #           "run_as_user": "root"
  #         },
  #         "logs": {
  #           "logs_collected": {
  #             "files": {
  #               "collect_list": [
  #                 {
  #                   "file_path": "/var/log/secure",
  #                   "log_group_name": "/var/log/secure",
  #                   "log_stream_name": "{instance_id}"
  #                 },
  #                 {
  #                   "file_path": "/var/log/httpd/access_log",
  #                   "log_group_name": "/var/log/httpd/access_log",
  #                   "log_stream_name": "{instance_id}"
  #                 },
  #                 {
  #                   "file_path": "/var/log/httpd/error_log",
  #                   "log_group_name": "/var/log/httpd/error_log",
  #                   "log_stream_name": "{instance_id}"
  #                 }
  #               ]
  #             }
  #           }
  #         },
  #         "metrics": {
  #           "append_dimensions": {
  #             "AutoScalingGroupName": "${aws:AutoScalingGroupName}",
  #             "ImageId": "${aws:ImageId}",
  #             "InstanceId": "${aws:InstanceId}",
  #             "InstanceType": "${aws:InstanceType}"
  #           },
  #           "metrics_collected": {
  #             "collectd": {
  #               "metrics_aggregation_interval": 60
  #             },
  #             "cpu": {
  #               "measurement": [
  #                 "cpu_usage_idle",
  #                 "cpu_usage_iowait",
  #                 "cpu_usage_user",
  #                 "cpu_usage_system"
  #               ],
  #               "metrics_collection_interval": 60,
  #               "resources": [
  #                 "*"
  #               ],
  #               "totalcpu": false
  #             },
  #             "disk": {
  #               "measurement": [
  #                 "used_percent",
  #                 "inodes_free"
  #               ],
  #               "metrics_collection_interval": 60,
  #               "resources": [
  #                 "*"
  #               ]
  #             },
  #             "diskio": {
  #               "measurement": [
  #                 "io_time",
  #                 "write_bytes",
  #                 "read_bytes",
  #                 "writes",
  #                 "reads"
  #               ],
  #               "metrics_collection_interval": 60,
  #               "resources": [
  #                 "*"
  #               ]
  #             },
  #             "mem": {
  #               "measurement": [
  #                 "mem_used_percent"
  #               ],
  #               "metrics_collection_interval": 60
  #             },
  #             "netstat": {
  #               "measurement": [
  #                 "tcp_established",
  #                 "tcp_time_wait"
  #               ],
  #               "metrics_collection_interval": 60
  #             },
  #             "statsd": {
  #               "metrics_aggregation_interval": 60,
  #               "metrics_collection_interval": 10,
  #               "service_address": ":8125"
  #             },
  #             "swap": {
  #               "measurement": [
  #                 "swap_used_percent"
  #               ],
  #               "metrics_collection_interval": 60
  #             }
  #           }
  #         }
  #       }      